define({ "api": [  {    "type": "post",    "url": "/login",    "title": "Login",    "name": "Login",    "group": "Accounts",    "version": "0.0.1",    "parameter": {      "fields": {        "Form URL-Encoded": [          {            "group": "Form URL-Encoded",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>Username</p>"          },          {            "group": "Form URL-Encoded",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>Password</p>"          }        ]      }    },    "success": {      "fields": {        "200 OK": [          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "success",            "description": ""          },          {            "group": "200 OK",            "type": "Object",            "optional": false,            "field": "data",            "description": ""          },          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "data.authToken",            "description": "<p>Unique login access token</p>"          },          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "data.userId",            "description": "<p>User's _id</p>"          }        ]      },      "examples": [        {          "title": "Success response",          "content": "{\n  \"status\": \"success\",\n  \"data\": {\n     \"authToken\": \"l5rTxmHlXs0UzRxz-E_fIFFYi2oIyNcikQ-6c_LlbC5\",\n     \"userId\": \"t4qD9ADQfRGfCcu6J\"\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "error",            "description": ""          },          {            "group": "Error 4xx",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>Error message</p>"          }        ]      },      "examples": [        {          "title": "Error response",          "content": "{\n  \"status\": \"error\",\n  \"message\": \"Unauthorized\"\n}",          "type": "json"        }      ]    },    "filename": "./api.js",    "groupTitle": "Accounts"  },  {    "type": "post",    "url": "/logout",    "title": "Logout",    "name": "Logout",    "group": "Accounts",    "version": "0.0.1",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-Auth-Token",            "description": "<p>User's unique login token</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-User-Id",            "description": "<p>User's '_id'</p>"          }        ]      }    },    "success": {      "fields": {        "200 OK": [          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "status",            "description": "<p>Success</p>"          },          {            "group": "200 OK",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>Array of all participants</p>"          }        ]      },      "examples": [        {          "title": "Success response",          "content": "{\n  \"status\": \"success\",\n  \"data\": {\n    \"message\": \"You've been logged out!\"\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "error",            "description": ""          },          {            "group": "Error 4xx",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>Error message</p>"          }        ]      },      "examples": [        {          "title": "Error response",          "content": "{\n  \"status\": \"error\",\n  \"message\": \"You must be logged in to do this.\"\n}",          "type": "json"        }      ]    },    "filename": "./api.js",    "groupTitle": "Accounts"  },  {    "type": "get",    "url": "/:collection",    "title": "Get all",    "name": "Get_all",    "group": "Collections",    "version": "0.0.1",    "description": "<p>Get all the documents in a collection.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-Auth-Token",            "description": "<p>User's unique login token</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-User-Id",            "description": "<p>User's '_id'</p>"          }        ]      }    },    "parameter": {      "fields": {        "URL parameters": [          {            "group": "URL parameters",            "type": "String",            "optional": true,            "field": "fields",            "defaultValue": "all",            "description": "<p>Dictionary of fields to return</p>"          },          {            "group": "URL parameters",            "type": "String",            "optional": true,            "field": "value",            "description": "<p>Value to be matched with the first field provided</p>"          },          {            "group": "URL parameters",            "type": "String",            "optional": true,            "field": "pageNumber",            "defaultValue": "1",            "description": "<p>Number of results to skip at the beginning</p>"          },          {            "group": "URL parameters",            "type": "String",            "optional": true,            "field": "nPerPage",            "description": "<p>Maximum number of results to return</p>"          }        ]      }    },    "success": {      "fields": {        "200 OK": [          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "success",            "description": "<p>Status</p>"          },          {            "group": "200 OK",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>Array of all participants</p>"          }        ]      },      "examples": [        {          "title": "Success response",          "content": "{\n  \"status\": \"success\",\n  \"data\": [\n    {\n      _id: t4qD9ADQfRGfCcu6J,\n      ...\n    },\n    {\n      ...\n    }\n  ]\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "401 Unauthorized": [          {            "group": "401 Unauthorized",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "error",            "description": ""          },          {            "group": "401 Unauthorized",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>Error message</p>"          }        ]      },      "examples": [        {          "title": "Error response",          "content": "{\n  \"status\": \"error\",\n  \"message\": \"You must be logged in to do this.\"\n}",          "type": "json"        }      ]    },    "examples": [      {        "title": "Participants' schema",        "content": " const Schemas = {};\n\n Schemas.DayOne = new SimpleSchema({\n  bus1: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 1 Bus 1\",\n    optional: true\n  },\n  bus2: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 1 Bus 2\",\n    optional: true\n  }\n});\n\n Schemas.DayTwo = new SimpleSchema({\n  bus1: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 2 Bus 1\",\n    optional: true\n  },\n  bus2: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 2 Bus 2\",\n    optional: true\n  },\n  activity: {\n    type: String,\n    label: \"Day 2 activity\",\n    optional: true\n  },\n  rental: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 2 rental\",\n    optional: true\n  },\n  race: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 2 race\",\n    optional: true\n  },\n  course: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 2 course\",\n    optional: true\n  }\n});\n\n Schemas.DayThree = new SimpleSchema({\n  bus1: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 3 Bus 1\",\n    optional: true\n  },\n  bus2: {\n    type: Boolean,\n    defaultValue: false,\n    label: \"Day 3 Bus 2\",\n    optional: true\n  }\n});\n\n Schemas.Bank = new SimpleSchema({\n  beneficiary: {\n    type: String,\n    label: \"Beneficiary\",\n    optional: true\n  },\n  IBAN: {\n    type: String,\n    label: \"IBAN\",\n    optional: true\n  },\n  name: {\n    type: String,\n    label: \"Name Bank\",\n    optional: true\n  },\n  swift_bic: {\n    type: String,\n    label: \"SWIFT/BIC\",\n    optional: true\n  }\n});\n\n Schemas.Info = new SimpleSchema({\n  address: {\n    type: String,\n    label: \"Your address\",\n    optional: true\n  },\n  city: {\n    type: String,\n    label: \"Your city\",\n    optional: true\n  },\n  zip: {\n    type: Number,\n    label: \"Your zip code\",\n    optional: true\n  },\n  province: {\n    type: String,\n    label: \"Your province\",\n    optional: true\n  },\n  country: {\n    type: String,\n    label: \"Your country\",\n    optional: true\n  }\n});\n\n Schemas.Birth = new SimpleSchema({\n  date: {\n    label: 'Birth date',\n    type: String,\n    regEx: /\\d{2}(\\\\)\\d{2}(\\\\)\\d{4}/,\n    optional: true\n  },\n  country: {\n    label: \"Country of birth\",\n    type: String,\n    max: 40,\n    optional: true\n  }\n});\n\n Schemas.Participant = new SimpleSchema({\n  _id: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  owner: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  firstName: {\n    type: String,\n    max: 25,\n    optional: true\n  },\n  lastName: {\n    type: String,\n    max: 25,\n    optional: true\n  },\n  email: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  phone: {\n    type: String,\n    optional: true\n  },\n  university: {\n    type: String,\n    optional: true\n  },\n  accommodation: {\n    type: String,\n    optional: true\n  },\n  host: {\n    type: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  info: {\n    type: Schemas.Info,\n    optional: true\n  },\n  birth: {\n    type: Schemas.Birth,\n    optional: true\n  },\n  bank: {\n    type: Schemas.Bank,\n    optional: true\n  },\n  dayOne: {\n    type: Schemas.DayOne,\n    optional: true\n  },\n  dayTwo: {\n    type: Schemas.DayTwo,\n    optional: true\n  },\n  dayThree: {\n    type: Schemas.DayThree,\n    optional: true\n  },\n  checkedIn: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  isVolleyPlayer: {\n    label: 'isVolleyPlayer',\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  hasPersonalID: {\n    label: 'hasPersonalID',\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  hasStudentID: {\n    label: 'hasStudentID',\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  foodAllergies: {\n    type: String,\n    optional: true\n  },\n  tshirt: {\n    label: 'T-shirt',\n    type: String,\n    allowedValues: ['S', 'M', 'L'],\n    optional: true\n  },\n  updatedAt: {\n    type: Date,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    },\n    denyInsert: true,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    defaultValue: new Date(),\n    optional: true\n  }\n});",        "type": "json"      },      {        "title": "Users' schema",        "content": " Schema = {};\n\n Schema.UserProfile = new SimpleSchema({\n  firstName: {\n    type: String\n  },\n  lastName: {\n    type: String\n  },\n  birthday: {\n    type: Date,\n    regEx: /\\d{2}(\\\\)\\d{2}(\\\\)\\d{4}/,\n    optional: true\n  },\n  gender: {\n    type: String,\n    allowedValues: ['Male', 'Female'],\n    optional: true\n  },\n  university: {\n    type: String,\n    label: \"University\",\n    optional: true\n  },\n  team_volley: {\n    type: Boolean,\n    optional: true\n  },\n  allowed_participants: {\n    type: Number\n  }\n});\n\n Schema.User = new SimpleSchema({\n  _id: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  username: {\n    type: String\n  },\n  emails: {\n    type: Array,\n    optional: true\n  },\n  \"emails.$\": {\n    type: Object\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  \"emails.$.verified\": {\n    type: Boolean\n  },\n  createdAt: {\n    type: Date,\n    defaultValue: new Date()\n  },\n  externals: {\n    type: Schema.UserProfile\n  },\n  roles: {\n    type: Array,\n    optional: true\n  },\n  'roles.$': {\n    type: String\n  }\n});",        "type": "json"      }    ],    "filename": "./api.js",    "groupTitle": "Collections"  },  {    "type": "get",    "url": "/:collection/:id/?fields=externals&pageNumber=2&nPerPage=5",    "title": "Get one",    "name": "Get_one",    "group": "Collections",    "version": "0.0.1",    "description": "<p>Finds the first document that matches the selector.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-Auth-Token",            "description": "<p>User's unique login token</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-User-Id",            "description": "<p>User's '_id'</p>"          }        ]      }    },    "parameter": {      "fields": {        "URL parameters": [          {            "group": "URL parameters",            "type": "String",            "optional": true,            "field": "fields",            "defaultValue": "all",            "description": "<p>Dictionary of fields to return</p>"          }        ]      }    },    "success": {      "fields": {        "200 OK": [          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "success",            "description": "<p>Status</p>"          },          {            "group": "200 OK",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>Participant's data</p>"          }        ]      },      "examples": [        {          "title": "Success response",          "content": "{\n  \"status\": \"success\",\n  \"data\": {\n    _id: t4qD9ADQfRGfCcu6J,\n    ...\n  }\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "401 Unauthorized": [          {            "group": "401 Unauthorized",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "error",            "description": ""          },          {            "group": "401 Unauthorized",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>Error message</p>"          }        ]      },      "examples": [        {          "title": "Error response",          "content": "{\n  \"status\": \"error\",\n  \"message\": \"You must be logged in to do this.\"\n}",          "type": "json"        }      ]    },    "filename": "./api.js",    "groupTitle": "Collections"  },  {    "type": "put",    "url": "/:collection/:id",    "title": "Update one",    "name": "Update_one",    "group": "Collections",    "version": "0.0.1",    "description": "<p>Modify one document in the collection.</p>",    "header": {      "fields": {        "Header": [          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-Auth-Token",            "description": "<p>User's unique login token</p>"          },          {            "group": "Header",            "type": "String",            "optional": false,            "field": "X-User-Id",            "description": "<p>User's '_id'</p>"          }        ]      }    },    "parameter": {      "fields": {        "Body parameter": [          {            "group": "Body parameter",            "type": "String",            "optional": false,            "field": "key",            "description": "<p>Set collection's key</p>"          }        ]      }    },    "success": {      "fields": {        "200 OK": [          {            "group": "200 OK",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "success",            "description": "<p>Status</p>"          },          {            "group": "200 OK",            "type": "Object",            "optional": false,            "field": "data",            "description": "<p>Empty object</p>"          }        ]      },      "examples": [        {          "title": "Success response",          "content": "{\n  \"status\": \"success\",\n  \"data\": {}\n}",          "type": "json"        }      ]    },    "error": {      "fields": {        "400 Bad Request": [          {            "group": "400 Bad Request",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "error",            "description": ""          },          {            "group": "400 Bad Request",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>Error message</p>"          }        ],        "401 Unauthorized": [          {            "group": "401 Unauthorized",            "type": "String",            "optional": false,            "field": "status",            "defaultValue": "error",            "description": ""          },          {            "group": "401 Unauthorized",            "type": "String",            "optional": false,            "field": "message",            "description": "<p>Error message</p>"          }        ]      },      "examples": [        {          "title": "Error response (400 Bad Request)",          "content": "{\n  \"status\": \"error\",\n  \"message\": \"randomKey is not allowed by the schema\"\n}",          "type": "json"        },        {          "title": "Error response (401 Unauthorized)",          "content": "{\n  \"status\": \"error\",\n  \"message\": \"You must be logged in to do this.\"\n}",          "type": "json"        }      ]    },    "filename": "./api.js",    "groupTitle": "Collections"  }] });
